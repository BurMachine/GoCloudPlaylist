// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: GoCloudPlaylist.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoCloudPlaylistClient is the client API for GoCloudPlaylist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoCloudPlaylistClient interface {
	// Добавление/удаление
	AddSong(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	DeleteSong(ctx context.Context, in *SongNameForDelete, opts ...grpc.CallOption) (*PlaylistResponse, error)
	// Потоковые действия
	PlaySong(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error)
	PauseSong(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error)
	Next(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error)
	Prev(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error)
	// Персистентность данных
	VersionGet(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	UploadVersionToPlaylist(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
}

type goCloudPlaylistClient struct {
	cc grpc.ClientConnInterface
}

func NewGoCloudPlaylistClient(cc grpc.ClientConnInterface) GoCloudPlaylistClient {
	return &goCloudPlaylistClient{cc}
}

func (c *goCloudPlaylistClient) AddSong(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) DeleteSong(ctx context.Context, in *SongNameForDelete, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) PlaySong(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error) {
	out := new(SongProc)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/PlaySong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) PauseSong(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error) {
	out := new(SongProc)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/PauseSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) Next(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error) {
	out := new(SongProc)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) Prev(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error) {
	out := new(SongProc)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongProc, error) {
	out := new(SongProc)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) VersionGet(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/VersionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCloudPlaylistClient) UploadVersionToPlaylist(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/api.GoCloudPlaylist/UploadVersionToPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoCloudPlaylistServer is the server API for GoCloudPlaylist service.
// All implementations must embed UnimplementedGoCloudPlaylistServer
// for forward compatibility
type GoCloudPlaylistServer interface {
	// Добавление/удаление
	AddSong(context.Context, *AddRequest) (*PlaylistResponse, error)
	DeleteSong(context.Context, *SongNameForDelete) (*PlaylistResponse, error)
	// Потоковые действия
	PlaySong(context.Context, *Empty) (*SongProc, error)
	PauseSong(context.Context, *Empty) (*SongProc, error)
	Next(context.Context, *Empty) (*SongProc, error)
	Prev(context.Context, *Empty) (*SongProc, error)
	Status(context.Context, *Empty) (*SongProc, error)
	// Персистентность данных
	VersionGet(context.Context, *VersionRequest) (*PlaylistResponse, error)
	UploadVersionToPlaylist(context.Context, *VersionRequest) (*PlaylistResponse, error)
	mustEmbedUnimplementedGoCloudPlaylistServer()
}

// UnimplementedGoCloudPlaylistServer must be embedded to have forward compatible implementations.
type UnimplementedGoCloudPlaylistServer struct {
}

func (UnimplementedGoCloudPlaylistServer) AddSong(context.Context, *AddRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedGoCloudPlaylistServer) DeleteSong(context.Context, *SongNameForDelete) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedGoCloudPlaylistServer) PlaySong(context.Context, *Empty) (*SongProc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedGoCloudPlaylistServer) PauseSong(context.Context, *Empty) (*SongProc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSong not implemented")
}
func (UnimplementedGoCloudPlaylistServer) Next(context.Context, *Empty) (*SongProc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedGoCloudPlaylistServer) Prev(context.Context, *Empty) (*SongProc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedGoCloudPlaylistServer) Status(context.Context, *Empty) (*SongProc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedGoCloudPlaylistServer) VersionGet(context.Context, *VersionRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionGet not implemented")
}
func (UnimplementedGoCloudPlaylistServer) UploadVersionToPlaylist(context.Context, *VersionRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVersionToPlaylist not implemented")
}
func (UnimplementedGoCloudPlaylistServer) mustEmbedUnimplementedGoCloudPlaylistServer() {}

// UnsafeGoCloudPlaylistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoCloudPlaylistServer will
// result in compilation errors.
type UnsafeGoCloudPlaylistServer interface {
	mustEmbedUnimplementedGoCloudPlaylistServer()
}

func RegisterGoCloudPlaylistServer(s grpc.ServiceRegistrar, srv GoCloudPlaylistServer) {
	s.RegisterService(&GoCloudPlaylist_ServiceDesc, srv)
}

func _GoCloudPlaylist_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).AddSong(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongNameForDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).DeleteSong(ctx, req.(*SongNameForDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/PlaySong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).PlaySong(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_PauseSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).PauseSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/PauseSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).PauseSong(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).Next(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).Prev(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_VersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).VersionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/VersionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).VersionGet(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCloudPlaylist_UploadVersionToPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCloudPlaylistServer).UploadVersionToPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoCloudPlaylist/UploadVersionToPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCloudPlaylistServer).UploadVersionToPlaylist(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoCloudPlaylist_ServiceDesc is the grpc.ServiceDesc for GoCloudPlaylist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoCloudPlaylist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GoCloudPlaylist",
	HandlerType: (*GoCloudPlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _GoCloudPlaylist_AddSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _GoCloudPlaylist_DeleteSong_Handler,
		},
		{
			MethodName: "PlaySong",
			Handler:    _GoCloudPlaylist_PlaySong_Handler,
		},
		{
			MethodName: "PauseSong",
			Handler:    _GoCloudPlaylist_PauseSong_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _GoCloudPlaylist_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _GoCloudPlaylist_Prev_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _GoCloudPlaylist_Status_Handler,
		},
		{
			MethodName: "VersionGet",
			Handler:    _GoCloudPlaylist_VersionGet_Handler,
		},
		{
			MethodName: "UploadVersionToPlaylist",
			Handler:    _GoCloudPlaylist_UploadVersionToPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GoCloudPlaylist.proto",
}
